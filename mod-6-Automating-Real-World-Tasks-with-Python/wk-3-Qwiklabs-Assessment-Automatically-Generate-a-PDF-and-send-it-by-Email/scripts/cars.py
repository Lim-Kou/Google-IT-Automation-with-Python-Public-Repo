#!/usr/bin/env python3

import json
import locale
import sys
import reports
import operator


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """
        Analyzes the data, looking for maximums.
        Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    max_sales = {"total_sales": 0}
    max_year_dict = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # TODO: also handle max sales
        if item["total_sales"] > max_sales["total_sales"]:
            max_sales["total_sales"] = item["total_sales"]
            max_sales["car_model"] = format_car(item["car"])
        # TODO: also handle most popular car_year
        if item["car"]["car_year"] not in max_year_dict.keys():
            max_year_dict[item["car"]["car_year"]] = item["total_sales"]
        else:
            max_year_dict[item["car"]["car_year"]] += item["total_sales"]
    # Get the year with the highest number of car sales.
    max_year_list = sorted(max_year_dict.items(), key=operator.itemgetter(1), reverse=True)
    summary = [
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(max_sales["car_model"], max_sales["total_sales"]),
        "The most popular year was {} with {} sales.".format(max_year_list[0][0], max_year_list[0][1])
    ]
    return summary


def process_list(summary):
    """Add line breaks between each paragraph and return the formatted paragraphs."""
    paragraph = "<br/>".join(summary)
    return str(paragraph)


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def sort_by_total_sales(data):
    """Sort the given list of lists by total_sales and return a list of lists."""
    data_by_sales = sorted(data, key=operator.itemgetter("total_sales"), reverse=True)
    table_data_by_sales = cars_dict_to_table(data_by_sales)
    return table_data_by_sales


def total_sales_of_each_car_made(data):
    """Given list of lists, return a dictionary with car_make as the key and total_sales as the values."""
    total_sales_dict = {}
    for item in data:
        if item["car"]['car_make'] not in total_sales_dict.keys():
            total_sales_dict[item["car"]["car_make"]] = item["total_sales"]
        else:
            total_sales_dict[item["car"]["car_make"]] += item["total_sales"]
    # Sort from the highest sales to the lowest sale:
    sorted_total_sales_dict = {key: value for key, value in
                               sorted(total_sales_dict.items(), key=lambda item: item[1], reverse=True)}
    return sorted_total_sales_dict


def top_selling_vehicles(data):
    """Given a list of list, return a list"""
    total_revenue_dict = {}
    for item in data:
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        car_model = format_car(item["car"])
        total_revenue_dict[car_model] = item_revenue
    # Sort from the highest sales to the lowest sale:
    sorted_total_sales_list = sorted(total_revenue_dict.items(), key=lambda x: x[1])
    return sorted_total_sales_list


def main():
    """Process the JSON data and generate a full report out of it."""
    data = load_data("./car_sales.json")
    summary = process_data(data)
    paragraph = process_list(summary)
    table_data = cars_dict_to_table(data)
    # print(summary)
    # print(table_data)

    # TODO: turn this into a PDF report
    # For Lab
    # reports.generate("/tmp/cars.pdf", "Sales summary for last month", paragraph, table_data)
    # For local machine
    reports.generate("tmp/cars.pdf", "Sales summary for last month", paragraph, table_data)

    """Optional Challenge"""
    # 1. Sort the list of cars in the PDF by total sales.
    table_data_by_sales = sort_by_total_sales(data)
    # 2. Create a pie chart for the total sales of each car made.
    total_sales_dict = total_sales_of_each_car_made(data)
    # 3. Create a bar chart showing total sales for the top 10 best-selling vehicles using the ReportLab Diagra library.
    top_10_best_selling_vehicles = top_selling_vehicles(data)[-10:]

    # Turn this into a PDF report
    reports.generate("tmp/cars_challenge.pdf", "Sales summary for last month",
                     paragraph, table_data=table_data_by_sales, total_sales_data=total_sales_dict,
                     total_sales_data_description="Pie chart for the total sales of each car made.",
                     vehicle_data=top_10_best_selling_vehicles,
                     vehicle_data_description=" Bar chart showing total sales for the top 10 best selling vehicles")

    # TODO: send the PDF report as an email attachment
    # For Lab
    """
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    subject = "Sales summary for last month"
    body = str("\n".join(summary))
    # Generate message
    message = emails.generate(sender, receiver, subject, body, "/tmp/cars.pdf")
    # Send message
    emails.send(message)
    """
    # For local machine
    """
    # Make sure all required keys are set:
    if not os.environ.get("OUTLOOK_email") or not os.environ.get("GOOGLE_email") or not os.environ.get(
            "GOOGLE_passkey"):
        raise RuntimeError(
            "Run in terminal instead of Pycharm Run and/or set OUTLOOK_email, GOOGLE_email and GOOGLE_passkey in ~/.profile")
    sender = os.environ.get("GOOGLE_email")
    receiver = os.environ.get("GOOGLE_email")
    subject = "Sales summary for last month"
    body = str("\n".join(summary))
    # Generate message
    message = emails.generate(sender, receiver, subject, body, "tmp/cars.pdf")
    # Send message
    emails.send(message)
    """


if __name__ == "__main__":
    main()